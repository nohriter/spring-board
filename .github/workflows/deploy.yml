name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 클론
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. JDK 17 설치 (Corretto 사용)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 4. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 5. AWS ECR 로그인
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      # 6. Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

      # 7. AWS ECR에 Docker 이미지 푸시
      - name: Push Docker Image to AWS ECR
        run: docker push ${{ secrets.ECR_REPOSITORY }}:latest

      # 8. EC2 서버에 SSH로 접속하여 배포
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@your-ec2-public-ip << 'EOF'
            docker pull ${{ secrets.ECR_REPOSITORY }}:latest
            docker stop spring-board || true
            docker rm spring-board || true
            docker run -d -e DB_HOST=${{ secrets.DB_HOST }} -e DB_PORT=${{ secrets.DB_PORT }} -e DB_NAME=${{ secrets.DB_NAME }} -e DB_USERNAME=${{ secrets.DB_USERNAME }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} -p 8080:8080 ${{ secrets.ECR_REPOSITORY }}:latest
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
