name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

      - name: Push Docker Image to AWS ECR
        run: docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy to EC2 using EC2 Instance Connect
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          EC2_PRIVATE_IP: ${{ secrets.EC2_PRIVATE_IP }}
        run: |
          echo "$SSH_PRIVATE_KEY" > spring-gesipan.pem
          chmod 600 spring-gesipan.pem

          # EC2 Private IP 얻기
          EC2_IP=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text --region ${{ secrets.AWS_REGION }})

          # EC2 Instance Connect를 통한 터널 연결
          aws ec2-instance-connect open-tunnel --instance-id $EC2_INSTANCE_ID --region ${{ secrets.AWS_REGION }} > ssh_tunnel

          # SSH 프록시 커맨드 추출
          SSH_PROXY_COMMAND=$(cat ssh_tunnel | grep "ProxyCommand")

          # SSH로 EC2에 연결 후 명령 실행
          ssh -v -i spring-gesipan.pem -o "StrictHostKeyChecking=no" -o "$SSH_PROXY_COMMAND" ec2-user@$EC2_IP << 'EOF'
              # ECR 로그인
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

              # 최신 이미지 가져오기
              docker pull ${{ secrets.ECR_REPOSITORY }}:latest

              # 기존 컨테이너 중지 및 삭제
              docker stop spring-board || true
              docker rm spring-board || true

              # 새 컨테이너 실행
              docker run -d \
                --name spring-board \
                -e DB_HOST=${{ secrets.DB_HOST }} \
                -e DB_PORT=${{ secrets.DB_PORT }} \
                -e DB_NAME=${{ secrets.DB_NAME }} \
                -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
                -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
                -e SPRING_PROFILES_ACTIVE=prod \
                -p 8080:8080 \
                ${{ secrets.ECR_REPOSITORY }}:latest
          EOF
      
